---
- name: Make sure grafana is down
  service:
    name: grafana-server
    state: stopped

- name: Wait for grafana to be stopped
  wait_for:
    port: 3000
    state: stopped

- name: Write grafana.ini
  copy:
    src: files/grafana.ini
    dest: /etc/grafana/grafana.ini
    owner: root
    group: grafana
    mode: 0640
  tags: [ini]

- name: Set owner on /etc/grafana
  file:
    path: /etc/grafana
    state: directory
    # This is the UID used by the grafana/grafana container
    owner: "{{ grafana.uid }}"
    recurse: true
  when:
    - containerized
  tags: [ini]

- name: Set domain in grafana.ini
  ini_file:
    path: /etc/grafana/grafana.ini
    section: server
    option: domain
    value: "{{ ansible_fqdn }}"
  tags: [ini]

- name: Set admin_user in grafana.ini
  ini_file:
    path: /etc/grafana/grafana.ini
    section: security
    option: admin_user
    value: "{{ grafana.admin_user }}"
  no_log: true
  tags: [ini]

- name: Set admin_password in grafana.ini
  ini_file:
    path: /etc/grafana/grafana.ini
    section: security
    option: admin_password
    value: "{{ grafana.admin_password }}"
  no_log: true
  tags: [ini]

- include: grafana_plugins.yml
  when:
    - devel_mode
    - not containerized

- name: Enable and start grafana
  service:
    name: grafana-server
    state: restarted
    enabled: true

- name: Wait for grafana to start
  wait_for:
    port: 3000

- name: Set grafana_data_source
  set_fact:
    grafana_data_source: >
      {
        "name":"{{ grafana.datasource }}",
        "type":"graphite",
        "url":"http://localhost:{{ graphite.web_port if graphite.service == 'graphite-web' else graphite.api_port }}",
        "access":"proxy",
        "basicAuth":false,
        "isDefault":true
      }
  when: backend.storage == 'graphite'

- name: Set grafana_data_source
  set_fact:
    grafana_data_source: >
      {
        "name":"{{ grafana.datasource }}",
        "type":"prometheus",
        "url":"http://prometheus:9090",
        "access":"proxy",
        "basicAuth":false,
        "isDefault":true
      }
  when: backend.storage == 'prometheus'

- name: Add data source
  uri:
    url: http://localhost:3000/api/datasources
    method: POST
    user: "{{ grafana.admin_user }}"
    password: "{{ grafana.admin_password }}"
    force_basic_auth: yes
    body_format: json
    body: "{{ grafana_data_source }}"
    # If we get a 409 Conflict, it means we're already set up. We'll update
    # after this.
    status_code: 200,409
  register: grafana_data_source_result
  # If grafana is containerized, it may take a few more seconds to start after
  # the port is open.
  until: grafana_data_source_result.status != -1
  retries: 6
  delay: 5

- name: Get datasource ID
  uri:
    url: "http://localhost:3000/api/datasources/id/{{ grafana.datasource }}"
    method: GET
    user: "{{ grafana.admin_user }}"
    password: "{{ grafana.admin_password }}"
    force_basic_auth: yes
  register: grafana_data_source_id
  when: grafana_data_source_result is defined and grafana_data_source_result.status == 409

- name: Update datasource
  uri:
    url: "http://localhost:3000/api/datasources/{{ grafana_data_source_id.json.id }}"
    method: PUT
    user: "{{ grafana.admin_user }}"
    password: "{{ grafana.admin_password }}"
    force_basic_auth: yes
    body_format: json
    body: "{{ grafana_data_source }}"
    status_code: 200
  when: grafana_data_source_result is defined and grafana_data_source_result.status == 409

- include: push_dashboards_dashupdater.yml
  when:
    - not containerized
    - backend.metrics == "cephmetrics"
    - backend.storage == "graphite"
  tags:
    - dashboards

- include: push_dashboards.yml
  when:
    - backend.metrics == "mgr"
    - backend.storage == "prometheus"
  tags:
    - dashboards

- include: add_notification_channel.yml
  tags:
    - notification
